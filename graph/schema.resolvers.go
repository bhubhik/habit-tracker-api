package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/bhubhik/habit-tracker-api/graph/model"
)

// CreateHabit is the resolver for the createHabit field.
func (r *mutationResolver) CreateHabit(ctx context.Context, name string, recurrence []*model.RecurrenceInput) (*model.Habit, error) {
	newHabit := &model.Habit{
		ID:        "3",
		Name:      "Biking",
		CreatedAt: "2025-05-23",
		Recurrence: []*model.Recurrence{
			{Weekdays: &model.WeekdaySchedule{
				Days: []*model.Weekday{weekdayPtr(model.WeekdayMonday)}},
			}},
	}
	return newHabit, nil
}

// Habits is the resolver for the habits field.
func (r *queryResolver) Habits(ctx context.Context) ([]*model.Habit, error) {
	return []*model.Habit{
		{
			ID:        "1",
			Name:      "Read",
			CreatedAt: "2025-05-01",
			Recurrence: []*model.Recurrence{
				{Weekdays: &model.WeekdaySchedule{Days: []*model.Weekday{weekdayPtr(model.WeekdayMonday)}}}},
		},
		{
			ID:        "2",
			Name:      "Workout",
			CreatedAt: "2025-05-03",
			Recurrence: []*model.Recurrence{
				{Weekdays: &model.WeekdaySchedule{Days: []*model.Weekday{weekdayPtr(model.WeekdayMonday)}}}},
		},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
