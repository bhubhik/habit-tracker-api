// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/habit/v1/habit.proto

package habitv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HabitService_CreateHabit_FullMethodName = "/habit.v1.HabitService/CreateHabit"
	HabitService_GetHabits_FullMethodName   = "/habit.v1.HabitService/GetHabits"
	HabitService_UpdateHabit_FullMethodName = "/habit.v1.HabitService/UpdateHabit"
	HabitService_DeleteHabit_FullMethodName = "/habit.v1.HabitService/DeleteHabit"
)

// HabitServiceClient is the client API for HabitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HabitServiceClient interface {
	CreateHabit(ctx context.Context, in *CreateHabitRequest, opts ...grpc.CallOption) (*Habit, error)
	GetHabits(ctx context.Context, in *GetHabitsRequest, opts ...grpc.CallOption) (*GetHabitResponse, error)
	UpdateHabit(ctx context.Context, in *UpdateHabitRequest, opts ...grpc.CallOption) (*Habit, error)
	DeleteHabit(ctx context.Context, in *DeleteHabitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type habitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHabitServiceClient(cc grpc.ClientConnInterface) HabitServiceClient {
	return &habitServiceClient{cc}
}

func (c *habitServiceClient) CreateHabit(ctx context.Context, in *CreateHabitRequest, opts ...grpc.CallOption) (*Habit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Habit)
	err := c.cc.Invoke(ctx, HabitService_CreateHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitServiceClient) GetHabits(ctx context.Context, in *GetHabitsRequest, opts ...grpc.CallOption) (*GetHabitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHabitResponse)
	err := c.cc.Invoke(ctx, HabitService_GetHabits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitServiceClient) UpdateHabit(ctx context.Context, in *UpdateHabitRequest, opts ...grpc.CallOption) (*Habit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Habit)
	err := c.cc.Invoke(ctx, HabitService_UpdateHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitServiceClient) DeleteHabit(ctx context.Context, in *DeleteHabitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HabitService_DeleteHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HabitServiceServer is the server API for HabitService service.
// All implementations must embed UnimplementedHabitServiceServer
// for forward compatibility.
type HabitServiceServer interface {
	CreateHabit(context.Context, *CreateHabitRequest) (*Habit, error)
	GetHabits(context.Context, *GetHabitsRequest) (*GetHabitResponse, error)
	UpdateHabit(context.Context, *UpdateHabitRequest) (*Habit, error)
	DeleteHabit(context.Context, *DeleteHabitRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHabitServiceServer()
}

// UnimplementedHabitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHabitServiceServer struct{}

func (UnimplementedHabitServiceServer) CreateHabit(context.Context, *CreateHabitRequest) (*Habit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHabit not implemented")
}
func (UnimplementedHabitServiceServer) GetHabits(context.Context, *GetHabitsRequest) (*GetHabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHabits not implemented")
}
func (UnimplementedHabitServiceServer) UpdateHabit(context.Context, *UpdateHabitRequest) (*Habit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHabit not implemented")
}
func (UnimplementedHabitServiceServer) DeleteHabit(context.Context, *DeleteHabitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHabit not implemented")
}
func (UnimplementedHabitServiceServer) mustEmbedUnimplementedHabitServiceServer() {}
func (UnimplementedHabitServiceServer) testEmbeddedByValue()                      {}

// UnsafeHabitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HabitServiceServer will
// result in compilation errors.
type UnsafeHabitServiceServer interface {
	mustEmbedUnimplementedHabitServiceServer()
}

func RegisterHabitServiceServer(s grpc.ServiceRegistrar, srv HabitServiceServer) {
	// If the following call pancis, it indicates UnimplementedHabitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HabitService_ServiceDesc, srv)
}

func _HabitService_CreateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).CreateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitService_CreateHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).CreateHabit(ctx, req.(*CreateHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitService_GetHabits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHabitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).GetHabits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitService_GetHabits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).GetHabits(ctx, req.(*GetHabitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitService_UpdateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).UpdateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitService_UpdateHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).UpdateHabit(ctx, req.(*UpdateHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitService_DeleteHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).DeleteHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitService_DeleteHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).DeleteHabit(ctx, req.(*DeleteHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HabitService_ServiceDesc is the grpc.ServiceDesc for HabitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HabitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "habit.v1.HabitService",
	HandlerType: (*HabitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHabit",
			Handler:    _HabitService_CreateHabit_Handler,
		},
		{
			MethodName: "GetHabits",
			Handler:    _HabitService_GetHabits_Handler,
		},
		{
			MethodName: "UpdateHabit",
			Handler:    _HabitService_UpdateHabit_Handler,
		},
		{
			MethodName: "DeleteHabit",
			Handler:    _HabitService_DeleteHabit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/habit/v1/habit.proto",
}
